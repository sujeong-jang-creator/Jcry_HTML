--4-1. 표준 조인(STANDARD JOIN)
SELECT A.EMP_NO
     , A.EMP_NM
     , A.ADDR
     , B.DEPT_CD
     , B.DEPT_NM
  FROM TB_EMP A, TB_DEPT B 
  WHERE A.DEPT_CD = B.DEPT_CD 
    AND A.ADDR LIKE '%수원%'
ORDER BY A.EMP_NO
; 

SELECT A.EMP_NO
     , A.EMP_NM
     , A.ADDR     
     , DEPT_CD
     , B.DEPT_NM
FROM TB_EMP A NATURAL JOIN TB_DEPT B 
  WHERE A.ADDR LIKE '%수원%'
  ;

 SELECT A.EMP_NO
      , A.EMP_NM
      , A.ADDR     
      , B.DEPT_NM
      , B.DEPT_CD
  FROM TB_EMP A NATURAL JOIN TB_DEPT B 
 WHERE A.ADDR LIKE '%수원%'
  ;


 SELECT A.EMP_NO
      , A.EMP_NM
      , A.ADDR     
      , B.DEPT_NM
      , DEPT_CD
   FROM TB_EMP A JOIN TB_DEPT B USING (DEPT_CD)
  WHERE A.ADDR LIKE '%수원%'
  ;


 SELECT A.EMP_NO
      , A.EMP_NM
      , A.ADDR     
      , B.DEPT_NM
      , DEPT_CD
   FROM TB_EMP A JOIN TB_DEPT B USING (B.DEPT_CD)
  WHERE A.ADDR LIKE '%수원%'
  ;
  
   SELECT A.EMP_NO
        , A.EMP_NM
        , A.ADDR     
        , B.DEPT_CD
        , B.DEPT_NM
     FROM TB_EMP A JOIN TB_DEPT B ON (A.DEPT_CD = B.DEPT_CD)
    WHERE A.ADDR LIKE '%수원%'
  ;


 SELECT A.EMP_NO
        , A.EMP_NM
        , A.ADDR     
        , DEPT_CD
        , B.DEPT_NM
     FROM TB_EMP A JOIN TB_DEPT B ON (A.DEPT_CD = B.DEPT_CD)
    WHERE A.ADDR LIKE '%수원%'
  ;


SELECT
       A.EMP_NO
     , A.EMP_NM
     , A.ADDR
     , B.DEPT_CD
     , B.DEPT_NM
     , C.CERTI_CD
  FROM TB_EMP A
     , TB_DEPT B
     , TB_EMP_CERTI C
 WHERE A.DEPT_CD = B.DEPT_CD
   AND A.ADDR LIKE '%수원%'
   AND A.EMP_NO = C.EMP_NO
ORDER BY A.EMP_NO;


SELECT A.EMP_NO
     , A.EMP_NM
     , A.ADDR     
     , B.DEPT_NM
     , B.DEPT_CD
     , C.CERTI_CD
  FROM TB_EMP A JOIN TB_DEPT B 
   ON (A.DEPT_CD = B.DEPT_CD)
  JOIN TB_EMP_CERTI C 
   ON (A.EMP_NO = C.EMP_NO)
  WHERE A.ADDR LIKE '%수원%';
 
 
 
INSERT INTO TB_DEPT VALUES ('100014', '4차산업혁명팀', '999999');
INSERT INTO TB_DEPT VALUES ('100015', '포스트코로나팀', '999999');

COMMIT; 

ALTER TABLE SQLD.TB_EMP DROP CONSTRAINT FK_TB_EMP01;

INSERT INTO SQLD.TB_EMP T (T.EMP_NO, T.EMP_NM, T.BIRTH_DE, T.SEX_CD, T.ADDR, T.TEL_NO, T.DIRECT_MANAGER_EMP_NO, T.FINAL_EDU_SE_CD, T.SAL_TRANS_BANK_CD, T.SAL_TRANS_ACCNT_NO, T.DEPT_CD, T.LUNAR_YN ) 
     VALUES ('1000000041', '이순신', '19811201', '1', '경기도 용인시 수지구 죽전1동 435', '010-5456-7878', NULL, '006', '003', '114-554-223433', '000000', 'N');                         
INSERT INTO SQLD.TB_EMP T (T.EMP_NO, T.EMP_NM, T.BIRTH_DE, T.SEX_CD, T.ADDR, T.TEL_NO, T.DIRECT_MANAGER_EMP_NO, T.FINAL_EDU_SE_CD, T.SAL_TRANS_BANK_CD, T.SAL_TRANS_ACCNT_NO, T.DEPT_CD, T.LUNAR_YN ) 
     VALUES ('1000000042', '정약용', '19820402', '1', '경기도 고양시 덕양구 화정동 231', '010-4054-6547', NULL, '004', '001', '110-223-553453', '000000', 'Y');                    
INSERT INTO SQLD.TB_EMP T (T.EMP_NO, T.EMP_NM, T.BIRTH_DE, T.SEX_CD, T.ADDR, T.TEL_NO, T.DIRECT_MANAGER_EMP_NO, T.FINAL_EDU_SE_CD, T.SAL_TRANS_BANK_CD, T.SAL_TRANS_ACCNT_NO, T.DEPT_CD, T.LUNAR_YN ) 
     VALUES ('1000000043', '박지원', '19850611', '1', '경기도 수원시 팔달구 매탄동 553', '010-1254-1116', NULL, '004', '001', '100-233-664234', '000000', 'N');                    
INSERT INTO SQLD.TB_EMP T (T.EMP_NO, T.EMP_NM, T.BIRTH_DE, T.SEX_CD, T.ADDR, T.TEL_NO, T.DIRECT_MANAGER_EMP_NO, T.FINAL_EDU_SE_CD, T.SAL_TRANS_BANK_CD, T.SAL_TRANS_ACCNT_NO, T.DEPT_CD, T.LUNAR_YN ) 
     VALUES ('1000000044', '장보고', '19870102', '1', '경기도 성남시 분당구 정자동 776', '010-1215-8784', NULL, '004', '002', '180-345-556634', '000000', 'Y');                         
INSERT INTO SQLD.TB_EMP T (T.EMP_NO, T.EMP_NM, T.BIRTH_DE, T.SEX_CD, T.ADDR, T.TEL_NO, T.DIRECT_MANAGER_EMP_NO, T.FINAL_EDU_SE_CD, T.SAL_TRANS_BANK_CD, T.SAL_TRANS_ACCNT_NO, T.DEPT_CD, T.LUNAR_YN ) 
     VALUES ('1000000045', '김종서', '19880824', '1', '경기도 고양시 일산서구 백석동 474', '010-3687-1245', NULL, '004', '002', '325-344-45345', '000000', 'Y');                    
COMMIT; 


SELECT A.EMP_NO
     , A.EMP_NM
     , B.DEPT_CD
     , B.DEPT_NM
  FROM TB_EMP A, TB_DEPT B 
 WHERE A.DEPT_CD IN ( '000000', '100001')
   AND A.DEPT_CD = B.DEPT_CD(+)
;


SELECT A.EMP_NO
     , A.EMP_NM
     , B.DEPT_CD
     , B.DEPT_NM
  FROM TB_EMP A 
LEFT OUTER JOIN TB_DEPT B 
 ON (A.DEPT_CD = B.DEPT_CD)
WHERE A.DEPT_CD IN ( '000000', '100001')
;


SELECT A.EMP_NO
     , A.EMP_NM
     , B.DEPT_CD
     , B.DEPT_NM
  FROM TB_EMP A
  , TB_DEPT B
WHERE B.DEPT_CD IN ('100014', '100015', '100001')
  AND A.DEPT_CD(+) = B.DEPT_CD ;
  
  SELECT
      A.EMP_NO
    , A.EMP_NM
    , B.DEPT_CD
    , B.DEPT_NM
 FROM TB_EMP A
 FULL OUTER JOIN TB_DEPT B ON (A.DEPT_CD = B.DEPT_CD)
WHERE 1 = 1
  AND (   A.EMP_NO IS NULL
       OR B.DEPT_CD IS NULL
      )
ORDER BY B.DEPT_CD DESC, A.EMP_NO DESC
;


DELETE 
  FROM TB_DEPT 
 WHERE DEPT_CD IN ('100014', '100015');

DELETE FROM TB_EMP 
WHERE EMP_NO IN ('1000000041','1000000042','1000000043','1000000044','1000000045'); 

COMMIT; 

ALTER TABLE SQLD.TB_EMP ADD CONSTRAINT FK_TB_EMP01 FOREIGN KEY (DEPT_CD) REFERENCES SQLD.TB_DEPT (DEPT_CD);

----------------------------------------------------------------------------------------------------------------------------------

--4-2. 집합 연산자 (SET OPERATOR)

SELECT A.EMP_NO, A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19600101' AND '19691231'
UNION  
SELECT A.EMP_NO, A.EMP_NM, A.BIRTH_DE 
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19700101' AND '197901231'
;

SELECT A.EMP_NO, A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19600101' AND '19691231'
UNION ALL
SELECT A.EMP_NO, A.EMP_NM, A.BIRTH_DE 
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19700101' AND '197901231'
;

SELECT A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19600101' AND '19691231'
UNION ALL
SELECT A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19700101' AND '197901231'
;


SELECT A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19600101' AND '19691231'
UNION  
SELECT A.EMP_NM, A.BIRTH_DE
FROM TB_EMP A 
WHERE A.BIRTH_DE BETWEEN '19700101' AND '197901231'
;


SELECT A.EMP_NO, A.EMP_NM, A.ADDR, B.CERTI_CD, C.CERTI_NM
FROM TB_EMP A , TB_EMP_CERTI B, TB_CERTI C 
WHERE A.EMP_NO = B.EMP_NO
AND B.CERTI_CD = C.CERTI_CD
AND C.CERTI_NM = 'SQLD'
INTERSECT 
SELECT A.EMP_NO, A.EMP_NM, A.ADDR, B.CERTI_CD, C.CERTI_NM
FROM TB_EMP A , TB_EMP_CERTI B, TB_CERTI C 
WHERE A.EMP_NO = B.EMP_NO
AND B.CERTI_CD = C.CERTI_CD
AND A.ADDR LIKE '%용인%';


SELECT A.EMP_NO, A.EMP_NM, A.ADDR, B.CERTI_CD, C.CERTI_NM
FROM TB_EMP A , TB_EMP_CERTI B, TB_CERTI C 
WHERE A.EMP_NO = B.EMP_NO
AND B.CERTI_CD = C.CERTI_CD
AND C.CERTI_NM = 'SQLD'
AND EXISTS ( SELECT 1 
               FROM TB_EMP K 
               WHERE K.EMP_NO = A.EMP_NO 
                 AND K.ADDR LIKE '%용인%')
;


SELECT A.EMP_NO, A.EMP_NM, A.ADDR, B.CERTI_CD, C.CERTI_NM
  FROM TB_EMP A , TB_EMP_CERTI B, TB_CERTI C 
 WHERE A.EMP_NO = B.EMP_NO
   AND B.CERTI_CD = C.CERTI_CD
   AND C.CERTI_NM = 'SQLD'
   AND A.ADDR LIKE '%용인%';
   
   
   SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.DEPT_CD FROM TB_EMP A 
MINUS 
SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.DEPT_CD  FROM TB_EMP A
WHERE A.DEPT_CD = '100001'
MINUS 
SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.DEPT_CD  FROM TB_EMP A
WHERE A.DEPT_CD = '100002'
MINUS 
SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.DEPT_CD  FROM TB_EMP A
WHERE A.DEPT_CD = '100003'
MINUS 
SELECT A.EMP_NO, A.EMP_NM, A.SEX_CD, A.DEPT_CD  FROM TB_EMP A 
WHERE A.SEX_CD = '1'
;

--4-3. 계층 형 질의와 SELF 조인
SELECT LEVEL LVL
     , LPAD(' ', 4*(LEVEL-1))|| EMP_NO || '(' || EMP_NM || ')' AS "조직인원"
     , A.DEPT_CD
     , B.DEPT_NM
     , CONNECT_BY_ISLEAF
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = B.DEPT_CD
START WITH A.DIRECT_MANAGER_EMP_NO IS NULL 
CONNECT BY 
PRIOR A.EMP_NO = A.DIRECT_MANAGER_EMP_NO
;


SELECT LEVEL LVL
     , LPAD(' ', 4*(LEVEL-1))|| EMP_NO || '(' || EMP_NM || ')' AS "조직인원"
     , A.DEPT_CD
     , B.DEPT_NM
     , CONNECT_BY_ISLEAF
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = B.DEPT_CD
START WITH A.EMP_NM = '이경오'
CONNECT BY PRIOR A.EMP_NO = A.DIRECT_MANAGER_EMP_NO
;

SELECT LEVEL LVL
     , LPAD(' ', 4*(LEVEL-1))|| EMP_NO || '(' || EMP_NM || ')' AS "조직인원"
     , A.DEPT_CD
     , B.DEPT_NM
     , CONNECT_BY_ISLEAF
     , CONNECT_BY_ROOT A.EMP_NO AS "최상위관리자"
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = B.DEPT_CD
START WITH A.DIRECT_MANAGER_EMP_NO IS NULL 
CONNECT BY PRIOR A.EMP_NO = A.DIRECT_MANAGER_EMP_NO;

SELECT LEVEL LVL
     , LPAD(' ', 4*(LEVEL-1))|| EMP_NO || '(' || EMP_NM || ')' AS "조직인원"
     , A.DEPT_CD
     , B.DEPT_NM
     , CONNECT_BY_ISLEAF
     , CONNECT_BY_ROOT A.EMP_NO AS "최상위관리자"
     , SYS_CONNECT_BY_PATH(EMP_NO || '(' || EMP_NM || ')', '/') AS "조직인원경로"
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = B.DEPT_CD
START WITH A.EMP_NM = '이경오'
CONNECT BY PRIOR A.EMP_NO = A.DIRECT_MANAGER_EMP_NO;


SELECT A.EMP_NO "사원번호"
     , A.EMP_NM "사원번호"
     , A.DIRECT_MANAGER_EMP_NO "관리자사원번호"
     , (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = A.DIRECT_MANAGER_EMP_NO) AS "관리자사원명" 
     , B.DIRECT_MANAGER_EMP_NO AS "차상위관리자사원번호"
     , (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = B.DIRECT_MANAGER_EMP_NO) AS "차상위관리자사원명"
FROM TB_EMP A INNER JOIN TB_EMP B 
ON(A.DIRECT_MANAGER_EMP_NO = B.EMP_NO)
JOIN TB_DEPT C 
ON (A.DEPT_CD = C.DEPT_CD)
;

SELECT A.EMP_NO "사원번호"
     , A.EMP_NM "사원번호"
     , A.DIRECT_MANAGER_EMP_NO "관리자사원번호"
     , (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = A.DIRECT_MANAGER_EMP_NO) AS "관리자사원명" 
     , B.DIRECT_MANAGER_EMP_NO AS "차상위관리자사원번호"
     , (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = B.DIRECT_MANAGER_EMP_NO) AS "차상위관리자사원명"
FROM TB_EMP A LEFT OUTER JOIN TB_EMP B 
ON(A.DIRECT_MANAGER_EMP_NO = B.EMP_NO)
JOIN TB_DEPT C 
ON (A.DEPT_CD = C.DEPT_CD)
;

--------------------------------------------------------------------------------------------------------
--4-4. 서브 쿼리

SELECT A.EMP_NO, A.EMP_NM, A.DEPT_CD
FROM TB_EMP A 
WHERE A.DEPT_CD =
(
    SELECT DEPT_CD 
    FROM TB_EMP
    WHERE EMP_NO = '1000000005'
); 

SELECT A.EMP_NO, B.EMP_NM, A.PAY_DE, A.PAY_AMT 
FROM SQLD.TB_SAL_HIS A, TB_EMP B 
WHERE A.PAY_DE = '20200525'
AND A.PAY_AMT >= 
(
SELECT AVG(K.PAY_AMT)
  FROM SQLD.TB_SAL_HIS K 
 WHERE K.PAY_DE = '20200525'
 )
 AND A.EMP_NO = B.EMP_NO;
 
 SELECT A.EMP_NO, COUNT(*) CNT 
FROM TB_EMP_CERTI A 
WHERE A.CERTI_CD 
IN 
(
SELECT K.CERTI_CD 
FROM SQLD.TB_CERTI K 
WHERE K.ISSUE_INSTI_NM = '한국데이터베이스진흥원'
) 
GROUP BY A.EMP_NO
ORDER BY A.EMP_NO
;


SELECT A.EMP_NO, COUNT(*) CNT 
FROM TB_EMP_CERTI A 
WHERE A.CERTI_CD 
=
(
SELECT K.CERTI_CD 
FROM SQLD.TB_CERTI K 
WHERE K.ISSUE_INSTI_NM = '한국데이터베이스진흥원'
) 
GROUP BY A.EMP_NO
ORDER BY A.EMP_NO
;


SELECT A.EMP_NO
     , A.EMP_NM
     , A.DEPT_CD
     , B.DEPT_NM
     , A.BIRTH_DE
  FROM TB_EMP A
     , TB_DEPT B 
WHERE (A.DEPT_CD, A.BIRTH_DE) IN 
(
    SELECT K.DEPT_CD, MIN(K.BIRTH_DE) AS MIN_BIRTH_DE 
    FROM TB_EMP K 
    GROUP BY K.DEPT_CD
    HAVING COUNT(*) > 1
) 
AND A.DEPT_CD = B.DEPT_CD
ORDER BY A.EMP_NO
; 


SELECT A.DEPT_CD, A.DEPT_NM 
FROM TB_DEPT A
WHERE EXISTS( SELECT 1 FROM TB_EMP K WHERE K.DEPT_CD = A.DEPT_CD 
AND K.ADDR LIKE '%강남%')
; 


SELECT A.EMP_NO
     , (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = A.EMP_NO) AS EMP_NM
     , A.CERTI_CD
     , (SELECT L.CERTI_NM FROM TB_CERTI L WHERE L.CERTI_CD = A.CERTI_CD) AS CERTI_NM
  FROM TB_EMP_CERTI A 
 WHERE A.CERTI_CD 
IN 
(
SELECT K.CERTI_CD 
FROM SQLD.TB_CERTI K 
WHERE K.ISSUE_INSTI_NM = '한국데이터베이스진흥원'
) 
ORDER BY CERTI_NM
;

SELECT B.EMP_NO
, (SELECT L.EMP_NM FROM TB_EMP L WHERE L.EMP_NO = B.EMP_NO) AS EMP_NM
, B.CERTI_CD
, (SELECT L.CERTI_NM FROM TB_CERTI L WHERE L.CERTI_CD = B.CERTI_CD) AS CERTI_NM
FROM 
(
SELECT K.CERTI_CD 
FROM SQLD.TB_CERTI K 
WHERE K.ISSUE_INSTI_NM = '한국데이터베이스진흥원'
) A 
, TB_EMP_CERTI B 
WHERE A.CERTI_CD = B.CERTI_CD
ORDER BY CERTI_NM
;


SELECT B.DEPT_CD
     , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = B.DEPT_CD) "부서명"
     , AVG(A.PAY_AMT) "평균급여"
 FROM SQLD.TB_SAL_HIS A, TB_EMP B 
WHERE A.PAY_DE = '20200525'
  AND A.EMP_NO = B.EMP_NO
GROUP BY B.DEPT_CD
HAVING AVG(A.PAY_AMT) >
(
    SELECT AVG(K.PAY_AMT)
      FROM SQLD.TB_SAL_HIS K, TB_EMP J
     WHERE K.PAY_DE = '20200525'
     AND K.EMP_NO = J.EMP_NO 
     AND J.DEPT_CD = '100004'
 )
ORDER BY "평균급여" DESC 
; 

SELECT B.DEPT_CD
     , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = B.DEPT_CD) "부서명"
     , AVG(A.PAY_AMT) "평균급여"
 FROM SQLD.TB_SAL_HIS A, TB_EMP B 
WHERE A.PAY_DE = '20200525'
  AND A.EMP_NO = B.EMP_NO
GROUP BY B.DEPT_CD
HAVING AVG(A.PAY_AMT) >
(
    SELECT AVG(K.PAY_AMT)
      FROM SQLD.TB_SAL_HIS K, TB_EMP J
     WHERE K.PAY_DE = '20200525'
     AND K.EMP_NO = J.EMP_NO 
     AND J.DEPT_CD = '100004'
 )
ORDER BY "평균급여" DESC 
; 

ALTER TABLE TB_EMP ADD(DEPT_NM VARCHAR2(150)); 

UPDATE TB_EMP A
SET A.DEPT_NM = ( SELECT K.DEPT_NM FROM TB_DEPT K WHERE K.DEPT_CD = A.DEPT_CD)
; 

COMMIT; 


SELECT EMP_NO, EMP_NM, DEPT_CD, DEPT_NM 
  FROM TB_EMP
  WHERE ROWNUM <= 10; 
  
  ALTER TABLE TB_EMP DROP COLUMN DEPT_NM; 
  
  
  
  CREATE TABLE INSERT_SUBQUERY_TEST
(
     EMP_NO CHAR(10) 
  ,  MAX_PAY_AMT NUMBER(15) 
);

INSERT INTO INSERT_SUBQUERY_TEST
VALUES ('1000000001', (SELECT MAX(PAY_AMT) FROM TB_SAL_HIS WHERE EMP_NO = '1000000001'))
; 

COMMIT;


SELECT * FROM INSERT_SUBQUERY_TEST;

DROP TABLE INSERT_SUBQUERY_TEST; 


CREATE VIEW V_TB_SAL_HIS_MAX_BY_EMP_NO
AS 
SELECT A.EMP_NO, A.EMP_NM, B.DEPT_CD, B.DEPT_NM
     , MAX(C.PAY_AMT) AS MAX_PAY_AMT 
  FROM TB_EMP A , TB_DEPT B, TB_SAL_HIS C 
 WHERE A.DEPT_CD = B.DEPT_CD 
   AND A.EMP_NO = C.EMP_NO 
GROUP BY A.EMP_NO, A.EMP_NM, B.DEPT_CD, B.DEPT_NM
;


SELECT * FROM V_TB_SAL_HIS_MAX_BY_EMP_NO;


DROP VIEW V_TB_SAL_HIS_MAX_BY_EMP_NO;

--4-6. 그룹 함수(GROUP FUNCTION)

SELECT A.DEPT_CD "부서코드"
   , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.DEPT_CD) AS "부서명"
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY A.DEPT_CD
ORDER BY A.DEPT_CD
; 

SELECT A.DEPT_CD "부서코드"
   , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.DEPT_CD) AS "부서명"
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY ROLLUP(A.DEPT_CD)
ORDER BY A.DEPT_CD ;

SELECT A.DEPT_CD "부서코드"
   , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.DEPT_CD) AS "부서명"
   , A.SEX_CD AS "성별코드"
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY ROLLUP(A.DEPT_CD,A.SEX_CD)
ORDER BY A.DEPT_CD, A.SEX_CD
;

SELECT CASE GROUPING(A.DEPT_CD) WHEN 1 THEN '모든부서' ELSE A.DEPT_CD END AS "부서코드"
   , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.DEPT_CD) AS "부서명"
   , CASE GROUPING(A.SEX_CD) WHEN 1 THEN '모든성별' ELSE A.SEX_CD END AS "성별코드"
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY ROLLUP(A.DEPT_CD,A.SEX_CD)
ORDER BY A.DEPT_CD, A.SEX_CD
;

SELECT A.DEPT_CD "부서코드"
   , (SELECT L.DEPT_NM 
        FROM TB_DEPT L 
        WHERE L.DEPT_CD = A.DEPT_CD) AS "부서명"
   , A.SEX_CD AS "성별코드"
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY CUBE(A.DEPT_CD, A.SEX_CD)
ORDER BY A.DEPT_CD ;


SELECT A.DEPT_CD "부서코드", '모든성별' AS "성별코드"   
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY A.DEPT_CD
UNION ALL 
SELECT '모든부서' AS "부서코드", A.SEX_CD AS "성별코드"   
   , COUNT(*) AS "부서별직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "부서별연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "부서별평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY A.SEX_CD
ORDER BY "부서코드", "성별코드"; 


SELECT DECODE(GROUPING(A.DEPT_CD), 1, '모든부서', A.DEPT_CD) AS "부서코드" 
   , DECODE(GROUPING(A.SEX_CD), 1, '모든성별', A.SEX_CD) AS "성별코드" 
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY GROUPING SETS(A.DEPT_CD, A.SEX_CD)
ORDER BY "부서코드", "성별코드"
;

SELECT DECODE(GROUPING(A.DEPT_CD), 1, '모든부서', A.DEPT_CD) AS "부서코드" 
   , DECODE(GROUPING(A.SEX_CD), 1, '모든성별', A.SEX_CD) AS "성별코드" 
   , COUNT(*) AS "직원수"
   , TO_CHAR(TRUNC(SUM(B."연봉")), 'L999,999,999,999') AS "연봉합계"
   , TO_CHAR(TRUNC(AVG(B."연봉")), 'L999,999,999,999') AS "평균연봉"  
FROM TB_EMP A 
   , (
      SELECT B.EMP_NO
           , SUM(B.PAY_AMT) AS "연봉"               
        FROM TB_SAL_HIS B 
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
     ) B 
WHERE A.EMP_NO = B.EMP_NO 
GROUP BY GROUPING SETS(A.DEPT_CD, A.SEX_CD)
ORDER BY "부서코드", "성별코드"
;

----------------------------------------------------------------------------------
--4-7. 윈도우 함수 (WINDOW FUNCTION)
 SELECT A.EMP_NO, A.EMP_NM, A.BIRTH_DE, A.DEPT_CD
      , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.DEPT_CD) AS DEPT_NM
      , RANK() OVER(ORDER BY A.BIRTH_DE) AS RANK
      , DENSE_RANK() OVER(ORDER BY A.BIRTH_DE) AS DENSE_RANK
      , ROW_NUMBER() OVER(ORDER BY A.BIRTH_DE) AS ROW_NUMBER
      , RANK() OVER(PARTITION BY A.DEPT_CD ORDER BY A.BIRTH_DE) AS RANK_DEPT_CD
   FROM TB_EMP A
   WHERE A.SEX_CD = '1' --남성
   ORDER BY A.BIRTH_DE    ; 

 SELECT A.EMP_NO      
      , A.MAX_EMP_NM
      , A.연봉
      , A.MAX_DEPT_CD
      , (SELECT DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.MAX_DEPT_CD) AS DEPT_NM
      , SUM(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD) AS "속한부서의연봉총액"
      , SUM(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD ORDER BY A.연봉 
                         RANGE UNBOUNDED PRECEDING) AS "속한부서의연봉누적합계"  
      , MAX(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD) AS "속한부서의최고연봉액" 
      , MIN(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD) AS "속한부서의최저연봉액" 
      , TRUNC(AVG(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD)) AS "속한부서의평균연봉액" 
      , TRUNC(AVG(A.연봉) OVER(PARTITION BY A.MAX_DEPT_CD ORDER BY A.연봉 
                               ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
                              )
             ) AS "속한부서에서앞뒤자신의평균연봉액" 
      , COUNT(*) OVER (PARTITION BY A.MAX_DEPT_CD) AS "부서별직원수"
   FROM 
      (
      SELECT B.EMP_NO
           , MAX(A.EMP_NM) AS MAX_EMP_NM
           , MAX(A.DEPT_CD) AS MAX_DEPT_CD
           , SUM(B.PAY_AMT) AS "연봉"                          
        FROM TB_SAL_HIS B , TB_EMP A
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       AND A.EMP_NO = B.EMP_NO       
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
      ) A       
 ORDER BY A.MAX_DEPT_CD, A.연봉;



DROP TABLE TB_REAL_IDX PURGE; 

CREATE TABLE TB_REAL_IDX 
(
    SEQ NUMBER(15) 
    , SECTOR_NM VARCHAR2(50)
    , STD_DE CHAR(8)
    , STD_TM CHAR(6)
    , CUR_IDX NUMBER(15, 2)
    , CONSTRAINT PK_TB_REAL_IDX 
     PRIMARY KEY(SEQ) 
)
;


INSERT INTO TB_REAL_IDX
SELECT ROWNUM AS RNUM
     , '코스피' AS SECTOR_NM
     , '20200629' AS STD_DE 
     , TO_CHAR(TO_DATE('090000', 'HH24MISS') + (ROWNUM*60)/24/60/60, 'HH24MISS') AS HH24MISS
     , CUR_IDX     
  FROM 
  (
  SELECT 
       ROUND(DBMS_RANDOM.VALUE(2000.00, 2050.99), 2) AS CUR_IDX       
     FROM DUAL CONNECT BY LEVEL <= 390
     ORDER BY CUR_IDX 
  ) 
UNION ALL 
SELECT ROWNUM+390 AS RNUM
     , '코스닥' AS SECTOR_NM
     , '20200629' AS STD_DE 
     , TO_CHAR(TO_DATE('090000', 'HH24MISS') + (ROWNUM*60)/24/60/60, 'HH24MISS') AS HH24MISS
     , CUR_IDX     
  FROM 
  (
  SELECT 
       ROUND(DBMS_RANDOM.VALUE(700.00, 725.99), 2) AS CUR_IDX       
     FROM DUAL CONNECT BY LEVEL <= 390
     ORDER BY CUR_IDX 
  ) 
;

COMMIT; 







SELECT * FROM TB_REAL_IDX ORDER BY SEQ;





SELECT A.SEQ
     , A.SECTOR_NM
     , A.STD_DE
     , A.STD_TM
     , A.CUR_IDX
     , FIRST_VALUE(CUR_IDX) OVER(PARTITION BY A.SECTOR_NM ORDER BY A.STD_TM 
                                 ROWS UNBOUNDED PRECEDING) AS "각지수의첫지수값"
     , LAST_VALUE(CUR_IDX) OVER(PARTITION BY A.SECTOR_NM ORDER BY A.STD_TM 
                                 ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS "각지수의마지막지수값"
     , LAG(CUR_IDX, 1) OVER (PARTITION BY A.SECTOR_NM ORDER BY A.STD_TM) AS "이전시간의지수값"
     , LEAD(CUR_IDX, 1) OVER (PARTITION BY A.SECTOR_NM ORDER BY A.STD_TM) AS "다음시간의지수값"
  FROM TB_REAL_IDX A
ORDER BY A.SECTOR_NM DESC, A.STD_DE, A.STD_TM
;

SELECT  
       A.MAX_DEPT_CD
     , A.부서별연봉총액
     , (SELECT L.DEPT_NM FROM TB_DEPT L WHERE L.DEPT_CD = A.MAX_DEPT_CD) AS DEPT_NM 
     , ROUND(RATIO_TO_REPORT(A.부서별연봉총액) OVER(), 4) * 100 || '%' AS "부서별연봉비율"
     , ROUND(PERCENT_RANK() OVER(ORDER BY A.부서별연봉총액), 4) *100 || '%' AS "부서별연봉비율순서별백분율"
     , ROUND(CUME_DIST() OVER(ORDER BY A.부서별연봉총액), 4) *100 || '%' AS "부서별연봉비율순서별누적백분율"
     , NTILE(4) OVER(ORDER BY A.부서별연봉총액) AS "부서별연봉비율순서별등분결과"
FROM 
(
SELECT 
        A.MAX_DEPT_CD
      , SUM(A.연봉) AS "부서별연봉총액"           
   FROM 
      (
      SELECT B.EMP_NO
           , MAX(A.EMP_NM) AS MAX_EMP_NM
           , MAX(A.DEPT_CD) AS MAX_DEPT_CD
           , SUM(B.PAY_AMT) AS "연봉"                          
        FROM TB_SAL_HIS B , TB_EMP A
       WHERE B.PAY_DE  BETWEEN '20190101' AND '20191231'
       AND A.EMP_NO = B.EMP_NO       
       GROUP BY B.EMP_NO 
       ORDER BY B.EMP_NO
      ) A       
GROUP BY A.MAX_DEPT_CD      
ORDER BY A.MAX_DEPT_CD
) A
 ;
 
 ---------------------------------------------------------------------------------------------------------
-- 4-8. DCL(DATA CONTROL LANGUAGE)


--system
DROP USER SQLD_TEST CASCADE; 
CREATE USER SQLD_TEST IDENTIFIED BY 1234;
GRANT CREATE SESSION TO SQLD_TEST; 

--sqld_test
CREATE TABLE TB_SQLD_TEST 
(
  SQLD_TEST_NO CHAR(10)
, SQLD_TEST_NM VARCHAR2(50)
, CONSTRAINT PK_TB_SQLD_TEST PRIMARY KEY(SQLD_TEST_NO)
)
;

--system
GRANT CREATE TABLE TO SQLD_TEST; 


--sqld_test
CREATE TABLE TB_SQLD_TEST 
(
  SQLD_TEST_NO CHAR(10)
, SQLD_TEST_NM VARCHAR2(50)
, CONSTRAINT PK_TB_SQLD_TEST PRIMARY KEY(SQLD_TEST_NO)
)
;

SELECT * FROM TB_SQLD_TEST;

--sqld_test
SELECT * FROM SQLD.TB_EMP;


--system
GRANT SELECT ON SQLD.TB_EMP TO SQLD_TEST; 



--sqld_test
SELECT * FROM SQLD.TB_EMP;


--system
GRANT INSERT, DELETE, UPDATE ON SQLD.TB_EMP TO SQLD_TEST; 

--system
REVOKE CREATE TABLE FROM SQLD_TEST; 


--sqld_test
CREATE TABLE TB_SQLD_TEST_2
(
  SQLD_TEST_NO CHAR(10)
, SQLD_TEST_NM VARCHAR2(50)
, CONSTRAINT PK_TB_SQLD_TEST PRIMARY KEY(SQLD_TEST_NO)
)
;



--system
DROP ROLE CREATE_SESSION_TABLE; 
CREATE ROLE CREATE_SESSION_TABLE; 
GRANT CREATE SESSION, CREATE TABLE TO CREATE_SESSION_TABLE; 
GRANT CREATE_SESSION_TABLE TO SQLD_TEST;


--sqld_test 

CREATE TABLE TB_SQLD_TEST_2
(
  SQLD_TEST_NO CHAR(10)
, SQLD_TEST_NM VARCHAR2(50)
, CONSTRAINT PK_TB_SQLD_TEST_2 PRIMARY KEY(SQLD_TEST_NO)
)
;

--system
DROP USER SQLD_TEST CASCADE; --생성한 테이블도 같이 제거됨 
CREATE USER SQLD_TEST IDENTIFIED BY 1234; 
GRANT CONNECT, RESOURCE TO SQLD_TEST; 

--sqld_test 
DROP TABLE TB_SQLD_TEST; 
CREATE TABLE TB_SQLD_TEST 
(
  SQLD_TEST_NO CHAR(10)
, SQLD_TEST_NM VARCHAR2(50)
, CONSTRAINT PK_TB_SQLD_TEST PRIMARY KEY(SQLD_TEST_NO)
)
;

---------------------------------------------------------------------------
--4-9. 절차 형 SQL

DROP TABLE TB_EMP_PAY_BY_YEAR; 
CREATE TABLE TB_EMP_PAY_BY_YEAR 
(
  EMP_NO CHAR(10) NOT NULL 
, STD_YEAR CHAR(4) NOT NULL 
, PAY_AMT NUMBER(15) NOT NULL 
, CONSTRAINT PK_TB_EMP_PAY_BY_YEAR PRIMARY KEY(EMP_NO, STD_YEAR)
)
;

CREATE OR REPLACE PROCEDURE SP_INSERT_TB_EMP_PAY_BY_YEAR
(IN_STD_YEAR IN TB_EMP_PAY_BY_YEAR.STD_YEAR%TYPE)
IS 
V_EMP_NO TB_SAL_HIS.EMP_NO%TYPE; 
V_SEX_CD TB_EMP.SEX_CD%TYPE; 
V_STD_YEAR TB_EMP_PAY_BY_YEAR.STD_YEAR%TYPE;  
V_PAY_AMT TB_SAL_HIS.PAY_AMT%TYPE;  
CURSOR SELECT_TB_EMP IS 
SELECT B.EMP_NO
     , (SELECT L.SEX_CD FROM TB_EMP L WHERE L.EMP_NO = B.EMP_NO) AS SEX_CD
     , SUBSTR(B.PAY_DE, 1, 4) AS STD_YEAR
     , SUM(B.PAY_AMT) AS PAY_AMT
  FROM TB_SAL_HIS B
 WHERE B.PAY_DE BETWEEN IN_STD_YEAR||'0101' AND IN_STD_YEAR||'1231'
 GROUP BY B.EMP_NO, SUBSTR(B.PAY_DE, 1, 4)
 ORDER BY B.EMP_NO;

BEGIN 
    OPEN SELECT_TB_EMP;
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------'); 
    LOOP 
        FETCH SELECT_TB_EMP INTO V_EMP_NO, V_SEX_CD, V_STD_YEAR, V_PAY_AMT; 
        EXIT WHEN SELECT_TB_EMP%NOTFOUND; 
        
        DBMS_OUTPUT.PUT_LINE('V_EMP_NO   : '  || '[' || V_EMP_NO ||']');
        DBMS_OUTPUT.PUT_LINE('V_SEX_CD   : '  || '[' || V_SEX_CD ||']');
        DBMS_OUTPUT.PUT_LINE('V_STD_YEAR : '  || '[' || V_STD_YEAR ||']');
        DBMS_OUTPUT.PUT_LINE('V_PAY_AMT  : '  || '[' || V_PAY_AMT ||']');
        
        IF V_SEX_CD = '1' THEN 
            INSERT INTO TB_EMP_PAY_BY_YEAR VALUES (V_EMP_NO, V_STD_YEAR, V_PAY_AMT); 
        END IF;                
    END LOOP;     
    CLOSE SELECT_TB_EMP;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------'); 
END SP_INSERT_TB_EMP_PAY_BY_YEAR;
/
;

TRUNCATE TABLE TB_EMP_PAY_BY_YEAR;       
EXEC SP_INSERT_TB_EMP_PAY_BY_YEAR('2019');

SELECT * FROM TB_EMP_PAY_BY_YEAR; 


CREATE OR REPLACE FUNCTION FUNC_EMP_CNT_BY_DEPT_CD(IN_DEPT_CD IN TB_DEPT.DEPT_CD%TYPE)
RETURN NUMBER IS V_EMP_CNT NUMBER;

BEGIN
SELECT COUNT(*) CNT
  INTO V_EMP_CNT
  FROM TB_EMP
 WHERE DEPT_CD = IN_DEPT_CD
 ;
 
RETURN V_EMP_CNT;
END;
/

SELECT A.DEPT_CD
     , A.DEPT_NM
     , FUNC_EMP_CNT_BY_DEPT_CD(A.DEPT_CD) AS EMP_CNT
FROM TB_DEPT A
;

DROP TABLE TB_EMP_PAY_SUM; 

CREATE TABLE TB_EMP_PAY_SUM 
(
   EMP_NO   CHAR(10)Not Null 
,  PAY_AMT_SUM NUMBER(15) Not Null 
, CONSTRAINT PK_TB_SAL_HIS_SUM PRIMARY KEY(EMP_NO)
)
;

INSERT INTO TB_EMP_PAY_SUM
SELECT EMP_NO, SUM(PAY_AMT) FROM TB_SAL_HIS
GROUP BY EMP_NO
ORDER BY EMP_NO 
;

COMMIT; 


CREATE OR REPLACE TRIGGER TRIG_TB_SAL_HIS_INSERT
AFTER INSERT 
ON TB_SAL_HIS 
FOR EACH ROW 
DECLARE 
V_EMP_NO TB_SAL_HIS.EMP_NO%TYPE;

BEGIN 
V_EMP_NO := :NEW.EMP_NO;

UPDATE TB_EMP_PAY_SUM A  
SET A.PAY_AMT_SUM = A.PAY_AMT_SUM + :NEW.PAY_AMT 
WHERE A.EMP_NO = V_EMP_NO;

IF SQL%NOTFOUND THEN 
    INSERT INTO TB_EMP_PAY_SUM VALUES (V_EMP_NO, :NEW.PAY_AMT);
END IF; 
END; 
/


INSERT INTO TB_SAL_HIS VALUES (
(  SELECT TO_CHAR(NVL(MAX(SAL_HIS_NO), 0) + 1) AS SAL_HIS_NO FROM TB_SAL_HIS)
 , TO_CHAR(SYSDATE, 'YYYYMMDD'), 1000000 , '9999999999'
);
 COMMIT; 


SELECT A.EMP_NO
     , A.PAY_AMT_SUM
  FROM TB_EMP_PAY_SUM a 
 WHERE EMP_NO = '9999999999'
; 


ALTER TABLE TB_SAL_HIS DROP CONSTRAINT FK_TB_SAL_HIS01; 


INSERT INTO TB_SAL_HIS VALUES (
( SELECT TO_CHAR(NVL(MAX(SAL_HIS_NO), 0) + 1) AS SAL_HIS_NO FROM TB_SAL_HIS)
, TO_CHAR(SYSDATE, 'YYYYMMDD'), 1000000, '1234567890'
); 
COMMIT; 


SELECT A.EMP_NO
     , A.PAY_AMT_SUM
  FROM TB_EMP_PAY_SUM A
 WHERE EMP_NO = '1234567890'
; 


DELETE FROM TB_SAL_HIS WHERE EMP_NO = '1234567890'; 
COMMIT;

ALTER TABLE SQLD.TB_SAL_HIS ADD CONSTRAINT FK_TB_SAL_HIS01 FOREIGN KEY (EMP_NO) REFERENCES SQLD.TB_EMP (EMP_NO) NOVALIDATE;


--4-10. 연습문제

SELECT A.EMP_NO, A.EMP_NM , B.CERTI_CD
, (SELECT L.CERTI_NM || '(' || L.ISSUE_INSTI_NM || ')' FROM TB_CERTI L WHERE L.CERTI_CD = B.CERTI_CD) AS CERTI_INFO
FROM TB_EMP A, TB_EMP_CERTI B 
WHERE NOT EXISTS (SELECT 1 
                    FROM TB_CERTI J
                       , TB_EMP_CERTI K 
                   WHERE J.ISSUE_INSTI_NM IN ( '한국데이터베이스진흥원' , '오라클')
                     AND J.CERTI_CD = K.CERTI_CD
                     AND K.EMP_NO = A.EMP_NO )
AND A.EMP_NO = B.EMP_NO 
ORDER BY A.EMP_NO
; 


-----------------------------------------

DROP TABLE TB_CUST_ORD; 
CREATE TABLE TB_CUST_ORD 
(
  CUST_NO CHAR(10), SALE_DE CHAR(8), SALE_AMT NUMBER(15)
); 

INSERT INTO TB_CUST_ORD VALUES ('1000000001', '20190701', 100000); 
INSERT INTO TB_CUST_ORD VALUES ('1000000001', '20190702', 30000); 
INSERT INTO TB_CUST_ORD VALUES ('1000000001', '20190702', 100000); 
INSERT INTO TB_CUST_ORD VALUES ('1000000002', '20190701', 200000); 
INSERT INTO TB_CUST_ORD VALUES ('1000000002', '20190701', 20000); 
COMMIT; 


SELECT 
CUST_NO, SALE_DE, SALE_AMT 
, SUM(SALE_AMT) OVER(PARTITION BY CUST_NO ORDER BY SALE_DE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AMT
FROM TB_CUST_ORD; 
;

-------------------------------------------------------------------------
SELECT SUM(NVL(B.PAY_AMT, 0)) AS PAY_AMT_SUM
FROM TB_EMP A, TB_SAL_HIS B
WHERE A.EMP_NM = '김회장'; 

-------------------------------------------------------------------------------
SELECT EMP_NO, EMP_NM, BIRTH_DE, RANK() OVER(ORDER BY BIRTH_DE) BIRTH_DE_RANK
  FROM TB_EMP
 WHERE SEX_CD = '1'
   AND BIRTH_DE >= '19800000'; 

--------------------------------------------------------------------
SELECT A.EMP_NO, A.EMP_NM, NVL(A.DIRECT_MANAGER_EMP_NO, '관리자없음') AS 직속관리자사원번호
FROM TB_EMP A
WHERE A.EMP_NM = '김회장'
; 

SELECT A.EMP_NO, A.EMP_NM
, CASE WHEN A.DIRECT_MANAGER_EMP_NO IS NULL  THEN '관리자없음' END AS 직속관리자사원번호 
FROM TB_EMP A
WHERE A.EMP_NM = '김회장'
; 
---------------------------------------------------------------------------------------

CREATE TABLE TB_COL_SUM_TEST
(
  COL_1 NUMBER(15)
, COL_2 NUMBER(15)
, COL_3 NUMBER(15)
)
;

INSERT INTO TB_COL_SUM_TEST VALUES(10, 20, NULL);
INSERT INTO TB_COL_SUM_TEST VALUES(15, NULL, NULL);
INSERT INTO TB_COL_SUM_TEST VALUES(50, 70, 20);
COMMIT; 

SELECT COL_1, COL_2, COL_3  FROM TB_COL_SUM_TEST;

---------------------------------------------------------------------------------------

CREATE TABLE TB_ORD_TEST
(
  ORD_NO CHAR(10)
, ORD_DE CHAR(8)
, ORD_AMT NUMBER
, ADD_AMT NUMBER
, ORD_MM CHAR(6)
);

INSERT INTO TB_ORD_TEST VALUES('0000000001', '20200101', 500, 50, '202001');
COMMIT;

SELECT * FROM TB_ORD_TEST;

SELECT COUNT(*) CNT, NVL(SUM(ORD_AMT), 0) AS ORD_AMT_SUM
FROM TB_ORD_TEST
WHERE ORD_MM = '202010'
GROUP BY ORD_MM
;

----------------------------------------------------------------------------------------
SELECT *
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = '100001'
AND B.DEPT_CD = '100001'
;


SELECT *
FROM TB_EMP A, TB_DEPT B
WHERE A.DEPT_CD = '100001'
AND A.DEPT_CD = B.DEPT_CD
;


---------------------------------------------------------------------------------------
CREATE TABLE TB_COL_SUM_TEST2
(
  COL_1 NUMBER(15)
, COL_2 NUMBER(15)
, COL_3 NUMBER(15)
, COL_4 NUMBER(15)
)
;

INSERT INTO TB_COL_SUM_TEST2 VALUES(NULL, NULL, 10, 20);
INSERT INTO TB_COL_SUM_TEST2 VALUES(10  , 15  , 20, 40);
INSERT INTO TB_COL_SUM_TEST2 VALUES(NULL, 10, NULL, NULL);
COMMIT;

SELECT SUM(COL_1) + SUM(COL_2+COL_3) + AVG(COL_4)
FROM TB_COL_SUM_TEST2;



DROP TABLE TB_REAL_IDX PURGE;

CREATE TABLE TB_REAL_IDX
(
    SEQ NUMBER(15)
    , SECTOR_NM VARCHAR2(50)
    , STD_DE CHAR(8)
    , STD_TM CHAR(6)
    , CUR_IDX NUMBER(15, 2)
    , CONSTRAINT PK_TB_REAL_IDX PRIMARY KEY(SEQ)
)
;

INSERT INTO TB_REAL_IDX
SELECT ROWNUM AS RNUM
     , '코스피' AS SECTOR_NM
     , '20200629' AS STD_DE
     , TO_CHAR(TO_DATE('090000', 'HH24MISS') + (ROWNUM*60)/24/60/60, 'HH24MISS') AS HH24MISS
     , CUR_IDX
  FROM
  (
  SELECT
       ROUND(DBMS_RANDOM.VALUE(2000.00, 2050.99), 2) AS CUR_IDX
     FROM DUAL CONNECT BY LEVEL <= 390
     ORDER BY CUR_IDX
  )
UNION ALL
SELECT ROWNUM+390 AS RNUM
     , '코스닥' AS SECTOR_NM
     , '20200629' AS STD_DE
     , TO_CHAR(TO_DATE('090000', 'HH24MISS') + (ROWNUM*60)/24/60/60, 'HH24MISS') AS HH24MISS
     , CUR_IDX
  FROM
  (
  SELECT
       ROUND(DBMS_RANDOM.VALUE(700.00, 725.99), 2) AS CUR_IDX
     FROM DUAL CONNECT BY LEVEL <= 390
     ORDER BY CUR_IDX
  )
;

COMMIT;

SELECT A.STD_DE AS "기준일자"
     , A.SECTOR_NM AS "지수명"
     , A.CUR_IDX_MAX AS  "최고지수"
     , B.STD_TM AS "최고지수시점"
     , A.CUR_IDX_MIN AS "최저지수"
     , C.STD_TM AS "최저지수시점"
  FROM
(
    SELECT A.STD_DE
         , A.SECTOR_NM
         , MAX(CUR_IDX) CUR_IDX_MAX
         , MIN(CUR_IDX) CUR_IDX_MIN
      FROM TB_REAL_IDX A
    WHERE STD_DE = '20200629'
    GROUP BY A.STD_DE, A.SECTOR_NM
) A
, TB_REAL_IDX B
, TB_REAL_IDX C
WHERE A.STD_DE = B.STD_DE
AND A.SECTOR_NM = B.SECTOR_NM
AND A.CUR_IDX_MAX = B.CUR_IDX
AND A.STD_DE = C.STD_DE
AND A.SECTOR_NM = C.SECTOR_NM
AND A.CUR_IDX_MIN = C.CUR_IDX
;


SELECT A.STD_DE AS  "기준일자"
     , A.SECTOR_NM AS "지수명"
     , MAX(CUR_IDX) AS "최고지수"
     , MAX(STD_TM) KEEP(DENSE_RANK LAST ORDER BY A.CUR_IDX) AS "최고지수시점"
     , MIN(CUR_IDX) AS "최저지수"
     , MAX(STD_TM) KEEP(DENSE_RANK FIRST ORDER BY A.CUR_IDX) AS "최저지수시점"
  FROM TB_REAL_IDX A
WHERE STD_DE = '20200629'
GROUP BY A.STD_DE, A.SECTOR_NM
;

-------------------------------------------------------------------

DROP TABLE TB_MAIN;
DROP TABLE TB_SUB;
CREATE TABLE TB_MAIN
(
      SEQ NUMBER
    , VAL CHAR(1)
);
CREATE TABLE TB_SUB
(
      SEQ NUMBER
    , VAL CHAR(1)
);
INSERT INTO TB_MAIN VALUES ( 1, 'A' );
INSERT INTO TB_MAIN VALUES ( 2, NULL);
INSERT INTO TB_MAIN VALUES ( 3, 'B');
INSERT INTO TB_MAIN VALUES ( 4, 'C');

INSERT INTO TB_SUB VALUES ( 1, 'A' );
INSERT INTO TB_SUB VALUES ( 2, NULL);
INSERT INTO TB_SUB VALUES ( 3, 'B');
COMMIT;

SELECT * FROM TB_MAIN A WHERE A.VAL IN (SELECT B.VAL FROM TB_SUB B);

SELECT * FROM TB_MAIN A WHERE A.VAL NOT IN (SELECT B.VAL FROM TB_SUB B);

SELECT * FROM TB_MAIN A WHERE EXISTS 
         ( SELECT 1 FROM TB_SUB B WHERE B.VAL = A.VAL);



SELECT * FROM TB_MAIN A WHERE NOT EXISTS 
        ( SELECT 1 FROM TB_SUB B WHERE B.VAL = A.VAL);


-------------------------------------------------------------

CREATE TABLE TB_JOIN_1
(
    KEY1 CHAR(1)
    , VAL1 CHAR(3)
    , VAL2 CHAR(3)
);


CREATE TABLE TB_JOIN_2
(
      KEY2 CHAR(1)
    , VAL3 CHAR(3)
    , VAL4 CHAR(3)
);

INSERT INTO TB_JOIN_1 VALUES ('A', '111', '222');
INSERT INTO TB_JOIN_1 VALUES ('B', '222', '333');
INSERT INTO TB_JOIN_1 VALUES ('C', '333', '444');
INSERT INTO TB_JOIN_1 VALUES ('D', '444', '555');

INSERT INTO TB_JOIN_2 VALUES ('D', '555', '666');
INSERT INTO TB_JOIN_2 VALUES ('E', '666', '777');
INSERT INTO TB_JOIN_2 VALUES ('F', '777', '888');

COMMIT;


SELECT COUNT(*) FROM TB_JOIN_1 A INNER JOIN TB_JOIN_2 B ON (A.KEY1 = B.KEY2);
SELECT COUNT(*) FROM TB_JOIN_1 A LEFT OUTER JOIN TB_JOIN_2 B ON (A.KEY1 = B.KEY2);
SELECT COUNT(*) FROM TB_JOIN_1 A RIGHT OUTER JOIN TB_JOIN_2 B ON (A.KEY1 = B.KEY2);
SELECT COUNT(*) FROM TB_JOIN_1 A FULL OUTER JOIN TB_JOIN_2 B ON (A.KEY1 = B.KEY2);
SELECT COUNT(*) FROM TB_JOIN_1 A CROSS JOIN TB_JOIN_2 B ;
------------------------------------------------------------------------------------------------



DROP TABLE TB_SAL_TEST;

CREATE TABLE TB_SAL_TEST
(
  SAL_NO CHAR(10)
, SAL_AMT NUMBER(15)
, EMP_NO CHAR(10)
, CONSTRAINT PK_TB_SAL_TEST PRIMARY KEY(SAL_NO)
);

DROP TABLE TB_EMP_TEST;
CREATE TABLE TB_EMP_TEST
(
  EMP_NO CHAR(10)
, EMP_NM VARCHAR2(50)
, CONSTRAINT PK_TB_EMP_TEST PRIMARY KEY(EMP_NO)
);

INSERT INTO TB_SAL_TEST VALUES ('1000000001', 2500000, '1000000001');
INSERT INTO TB_SAL_TEST VALUES ('1000000002', 2500000, '1000000001');
INSERT INTO TB_SAL_TEST VALUES ('1000000003', 2500000, '1000000001');
INSERT INTO TB_SAL_TEST VALUES ('1000000004', 2500000, '1000000003');

INSERT INTO TB_EMP_TEST VALUES ('1000000001', '이경오');
INSERT INTO TB_EMP_TEST VALUES ('1000000002', '이말년');


COMMIT;


SELECT A.SAL_NO, A.SAL_AMT, A.EMP_NO
  FROM TB_SAL_TEST A
  WHERE NOT EXISTS 
 ( SELECT 1 
    FROM TB_EMP_TEST K 
   WHERE K.EMP_NO = A.EMP_NO
 )
  ;

SELECT A.SAL_NO, A.SAL_AMT, A.EMP_NO
  FROM
      TB_SAL_TEST A  LEFT OUTER JOIN TB_EMP_TEST B
     ON (A.EMP_NO = B.EMP_NO)
 WHERE B.EMP_NO IS NULL
;


 SELECT A.SAL_NO, A.SAL_AMT, A.EMP_NO
  FROM
      TB_SAL_TEST A  LEFT OUTER JOIN TB_EMP_TEST B
     ON (A.EMP_NO = B.EMP_NO)
 WHERE B.EMP_NO IS NOT NULL
 ;
 
  SELECT A.SAL_NO, A.SAL_AMT, A.EMP_NO
  FROM
      TB_SAL_TEST A  LEFT OUTER JOIN TB_EMP_TEST B
     ON (A.EMP_NO = B.EMP_NO)
 WHERE A.EMP_NO IS NULL
;

 SELECT A.SAL_NO, A.SAL_AMT, A.EMP_NO
  FROM
      TB_SAL_TEST A  LEFT OUTER JOIN TB_EMP_TEST B
     ON (A.EMP_NO = B.EMP_NO)
 WHERE A.EMP_NO IS NOT NULL
 ;
 
 --------------------------------------------------------------------
 SELECT LEVEL LVL
, LPAD(' ', 4*(LEVEL-1)) || A.EMP_NO 
, A.DIRECT_MANAGER_EMP_NO
, CONNECT_BY_ISLEAF 
FROM TB_EMP A 
START WITH A.DIRECT_MANAGER_EMP_NO IS NULL 
CONNECT BY PRIOR A.EMP_NO = A.DIRECT_MANAGER_EMP_NO
; 
--------------------------------------------------------------------


CREATE TABLE TB_SUM_TEST_1 
(
   KEY1 CHAR(1) 
 , VAL1 NUMBER(15) 
);

CREATE TABLE TB_SUM_TEST_2
(
   KEY2 CHAR(1) 
 , VAL2 NUMBER(15) 
);

INSERT INTO TB_SUM_TEST_1 VALUES ('A', 1); 
INSERT INTO TB_SUM_TEST_1 VALUES (NULL, 2); 
INSERT INTO TB_SUM_TEST_1 VALUES ('B', 3); 
INSERT INTO TB_SUM_TEST_1 VALUES ('C', 4); 

COMMIT; 

INSERT INTO TB_SUM_TEST_2 VALUES ('A', 1); 
INSERT INTO TB_SUM_TEST_2 VALUES (NULL, 2); 
INSERT INTO TB_SUM_TEST_2 VALUES ('B', 3); 

COMMIT; 

SELECT * 
  FROM TB_SUM_TEST_1 A 
     , TB_SUM_TEST_2 B 
 WHERE A.KEY1 <> B.KEY2
 ORDER BY A.KEY1, B.KEY2
 ; 



-------------------------------------------------------------------------------------







